Git & Github

* Git : 버전 관리와 동시 협업을 가능하게 해주는 소프트웨어 자체, 다른 컴퓨터(Github)에 작업물을 보낼 수 있다.(작업물을 보낸다는 건 백업본을 만든다는 것과 같은 의미이다.)
* Github : Git으로 관리하는 프로젝트의 복사본을 저장하는 서버를 제공해주고 협업을 위한 편의 기능을 제공해주는 서비스, 원격 저장소

* 버전 관리 : 파일의 변화를 시간에 따라서 기록했다가 원하는 시점에 다시 꺼내올 수 있는 시스템. 

* 버전 관리의 장점 : 지난 과정 확인 가능, 잘못된 부분이 생기면 이전 버전으로 돌아갈 수 있다.

* 레포지토리(repository) : 커밋이 저장되는 저장소, 프로젝트 개발을 시작하면서 프로젝트 디렉토리를 만들고 해당 디렉토리를 Git을 사용하여 버전 관리를 시작하게 되면 레포지토리에 버전별 프로젝트 모습과 버전별 변경사항이 모두 저장된다. 이러한 변경사항이 저장된 .git 디렉토리(숨겨진 디렉토리)를 레포지토리라 부른다.

* 커밋(commit) : 지금 모습이 하나의 버전으로 남으면 좋겠다 => 커밋을 하여 하나의 버전으로 남긴다. 커밋을 하게되면 커밋을 하는 당시의 프로젝트 디렉토리 모습이 마치 사진처럼 레포지토리에 저장된다. 이렇게 만들어진 고정된 결과물 자체도 커밋이라 한다. 정리하자면 프로젝트 디렉토리의 특정 모습을 하나의 버전으로 남기는 행위&결과물 이 커밋이다.

* Git bash에서 Git으로 어떤 작업을 할 때 마다 사용해야 하는 커맨드 = git []
* git 뒤에오는 커맨드에 따라 어떤 작업을 하게될 지 결정된다.
* git init 이후 ls -al을 하게되면 .git으로 끝나는 디렉토리가 생기는데, 이 디렉토리가 레포지토리이다.

* commit을 하기 전에 꼭 해야할 것 ? Git에게 commit한 사람 알려주기!
* 이를 위해 git config 커맨드를 사용하여 user.name과 user.email을 저장한다.
* commit에 필요한 것 : 이름, 이메일, 커밋 메시지(커밋에 대한 정보)
* untracked : Git에 의해 아직 추적되지 않고 있다 -> 버전 관리의 대상이 아니다.
* commit할 파일을 미리 지정해줘야 함 -> 수정된 파일의 모습이 커밋에 포함될 것이라 지정하는 것. -> git add커맨드 사용
* root-commit : 해당 프로젝트의 첫 번째 커밋 이라는 의미
* 7 insertions(+) : 총 7줄이 변경되었다는 의미(추가&변경된 내용을 줄수로 계산함)
* 순서
	1. git init 
	2. git config user.name "temp"
	3. git config user.email "temp@com" (이렇게 3개까지는 첫 1회만 하면 된다.)
	4. git status (수정된 파일이 있는지 확인하는 작업)
	5. git add temp (수정된 파일이 있으면 git add로 staging area에 올리는 작업)
	6. git commit -m "temp" (새로운 버전을 만드는 작업)

* Git은 내부적으로 크게 3가지 종류의 작업영역을 두고 동작한다.
	1. working directory(working tree) : 작업을 하는 프로젝트 디렉토리.
	2. staging area(index) : git add한 파일들이 존재하는 영역. commit을 하게되면 staging area에 있는 파일들만 커밋에 반영된다.
	3. repository : working directory의 변경 이력들이 저장되어 있는 영역. 즉 commit이 저장되는 장소
* 하나의 흐름으로 보자면
	1. working directory에서 뭔가 작업을 하고
	2. 작업한 파일들을 git add 해주고
	3. 커밋을 하게되면 staging area에 있던 파일들의 모습이 마치 영화의 한 장면, 스냅샷(snapshot)처럼 repository에 저장되는 것.
* 이를 우리 프로젝트를 기준으로 보자면
	1. working directory에서 login.jsp 파일과 register.jsp 파일을 작성하고
	2. git add login.jsp, git add register.jsp를 실행해서 login.jsp와 register.jsp 둘다 staging area에 올린다.
	3. 그 다음 git commit -m "Member Ver_1" 을 실행해서 staging area에 있는 파일들을 가져와 commit으로 남긴다.(지금 만든 login.jsp와 register.jsp가 마치 사진처럼 저장된 것)
* 만약 Member Ver_1 커밋이후 작업을 더 진행하여 login.jsp와 register.jsp파일의 내용들이 변경된 후 commit을 할 때 register.jsp파일만 변경된 사항을 저장하고 싶다면
	1. working directory에서 login.jsp 파일에 내용을 추가하고 register.jsp 파일도 내용을 추가한다.	
	2. git add를 할 때 git add register.jsp 만 실행해서 register.jsp 파일만 staging area에 올린다.
	3. git commit -m "Member Ver_2"로 두 번째 commit을 실행한다.
	4. 이렇게 하면 Ver_1 당시의 login.jsp와 새로운 사항이 추가된 register.jsp파일이 Member Ver_2 commit으로 남게된다.

* git status 커맨드 사용 후 출력되는
	1. Changes to be committed은 지금 상태에서 commit을 하게되면 commit에 반영될 파일이 무엇인지 보여준다.(git add를 진행한 파일은 여기에 들어가있다.)
	2. Changes not staged for commit은 파일에 변경사항이 있지만 git add를 진행하지 않아 staging area에 추가되지 않은 파일들을 보여준다. 
  * stage : git add로 파일을 staging area에 추가하는 것
  	3. working tree clean : working derectory 가 이전 commit 이후로 변경 사항이 없다는 의미. 보통 commit 직후 git status를 하게되면 이런 문구가 출력된다.

* directory를 git add하게 되면 해당 directory안에 있는 모든 파일이 staging area에 추가된다.

* Git이 가지고 있는 상태
	1. Untracked 상태 : 파일이 Git에 의해서 그 변동사항이 전혀 추적되지 않고 있는 상태. 파일을 새로 생성하고 그 파일을 한 번도 git add 해주지 않았다면 이 상태입니다. 
	2. Tracked 상태 : 파일이 Git에 의해 그 변동사항이 추적되고 있는 상태. 특성에 따라 3가지로 나뉜다.
		(1) Staged 상태 : 파일의 내용이 수정되고나서, staging area에 올라와있는 상태. 새로 생성한 파일에 내용을 쓰고 git add를 해주거나, 한 번이라도 커밋에 포함됐었던 파일이라도 내용을 수정하고 git add를 해주면 이 상태입니다.
		(2) Unmodified 상태 : 현재 파일의 내용이 최신 커밋의 모습과 비교했을 때 전혀 바뀐 게 없는 상태면 이 상태입니다. 커밋을 하고 난 직후에는 working directory 안의 모든 파일들이 이 상태가 됩니다.
		(3) Modified 상태 : 최신 커밋의 모습과 비교했을 때 조금이라도 바뀐 내용이 있는 상태.

	Untracked         Unmodified         Modified         Staged
	    --------------------- Add the file ------------------>
	                     - Edit the file ->
	                                       - Stage the file ->
	                        <------------ Commit -----------               
	    <- Remove the file - 
	1. Add the file : Untracked 상태의 파일을 처음으로 git add 해주면 Staged 상태가 됩니다.
	2. Edit the file : 최신 커밋과 비교했을 때 차이가 없는 Unmodified 상태의 파일의 내용을 수정하면 Modified 상태가 됩니다.
	3. Stage the file : Modified 상태의 파일을 git add 해주면 Staged 상태가 됩니다.
	4. Remove the file : 파일을 삭제하면 Git에서 더이상 인식하지 못합니다.
	5. Commit : commit을 하면 staging area에 있던 파일들이 커밋에 반영되고, 이제 모든 파일들은 최신 커밋과 차이가 없게 되니까 Unmodified 상태가 됩니다.

* github.com 우측 상단 Sign up으로 github로그인 필수!
* Create repository를 클릭하여 비어있는 repository를 생성합니다.
	1. Repository name은 working directory 이름과 같지 않아도 됩니다.
	2. Description은 해당 repository에 관한 간략한 설명을 적습니다.
	3. 나머지 항목은 모두 기본값으로 그대로 두고 create repository를 합니다.
	4. 이렇게 만들어진 repository를 원격 레포지토리 or 리모트 레포지토리라고 부릅니다.
	5. 내 컴퓨터에 있는 레포지토리는 로컬 레포지토리라고 부릅니다.
* 리모트 레포지토리 내 항목 설명
	1. ...or create a new repository on the command line : 로컬 레포지토리를 만들고 commit을 한 후에 깃 허브에 업로드 하기
	2. ...or push an existing repository from the command line : 이미 만든 로컬 레포지토리를 깃허브에 업로드 하기
* github에서 커맨드 복사 / 붙여넣기 단축기
	1. 복사 : ctrl + insert
	2. 붙여넣기 : shift + insert
* …or push an existing repository from the command line을 사용해보기
	1. git remote add origin https://github.com/purings2/Math_Box.git
	2. git branch -M main
	3. git push -u origin main
	4. 3번까지 실행하면 팝업창이 뜨고, Sign in with your browser를 클릭합니다.
	5. Authorize GitCredentialManager를 클릭합니다.
	6. github 회원가입 시 설정한 Password를 입력하라고 나옵니다. 로컬 레포지토리를 리모트 레포지토리로 복사하려면 인증된 사용자만 가능하도록 하기위한 인증절차입니다. 깃허브 회원가입 시 작성한 Password를 정확하게 입력해주세요.
	7. 비밀번호가 맞으면 Authentication Succeeded라는 화면이 나오고 git bash에 Branch관련된 내용이 출력되는 걸 볼 수 있습니다.
	8. 이 상태에서 github 홈페이지로 가서 새로고침을 누르면 화면이 변경된 걸 확인할 수 있습니다.
	9. 이미 만든 로컬 레포지토리를 깃허브에 업로드 하는 방식을 사용했기에 가운데 내용을 보면 내가 만들었던 파일 혹은 디렉토리가 업로드된 걸 볼 수 있습니다.
	10. 파일 위에보면 돌아가는 시계모양의 commit을 볼 수 있는데 클릭해보면 commit한 사람, commit 메시지, commit 시간이 잘 나오는 걸 볼 수 있습니다.
	11. commit 메시지를 눌러보면 어떤 내용이 삭제되고 추가되었는지 한 눈에 확인 할 수 있습니다.

* git push : 로컬 레포지토리 내용 -> 리모트 레포지토리에 반영
    - git add 후 commit을 하게되면 해당 커밋버전으로 로컬 레포지토리에는 저장되어 있지만 push를 하기 전까지는 리모트 레포지토리엔 커밋버전이 올라가지 않는다.
	- 즉, 언제 어디서든 내가 작업한 최신 작업물을 Github에서 받아서 사용하려면 꼭 push를 해서 Github의 리모트 레포지토리로도 옮겨야하는 것!

* Github는 파일 이름이 README일 경우 그 파일의 내용을 바로 보여준다.
    - 일반적으로 프로젝트에 관한 설명을 README파일에 담기 때문

* Github에서 README구역 오른쪽 상단 연필모양을 클릭하게되면 README파일을 수정할 수 있다.
	- 내용 수정 후 아래로 스크롤해보면 Commit changes가 있고 이곳에 commit메시지를 작성해주면 된다.
	- 아래칸은 좀 더 상세한 commit메시지를 작성할 수 있는 공간이다.
	- 이렇게 Github에서도 commit이 가능한데, 이 경우 로컬 레포지토리보다 리모트 레포지토리가 더 최근 자료가 된다.

* git pull : 리모트 레포지토리가 로컬 레포지토리보다 최신자료일경우 사용하는 커맨드이다. 
	- 리모트 레포지토리의 새로운 내용을 가져와서 로컬 레포지토리에 반영

* 리모트 레포지토리를 만드는 이유는?
	1. 똑같은 레포지토리를 하나 더 생성하기 때문에 안정성이 생긴다. 
		- 로컬 레포지토리가 손상되어 사용이 불가능해도 파일을 복구할 수 있다.
	2. 다른 개발자들과 협업을 할 수 있다.
		- 내가 push한 자료를 다른 개발자A가 pull로 가지고가서 작업을하고 다시 push를 했다면 리모트 레포지토리엔 다른 개발자A가 push한 내용이 최신으로 반영되어있다.
		- 이 파일을 내가 pull한다면 개발자A가 작업한 최신파일을 가지고 작업할 수 있다.
		- 우리가 git을 쓰려는 이유!! 

* Github 리모트 레포지토리 설정하여 다른 사람도 push할 수 있도록 설정하기
	1. Github 해당 리모트 레포지토리의 우측 상단 톱니바퀴 Setting을 클릭한다.
	2. 좌측 옵션에서 Manage access를 클릭한다.
	3. PUBLIC REPOSITORY라는 표현이 보일텐데, 이 말은 누구나 나의 레포지토리 주소만 알면 그 내용을 살펴볼 수 있다는 것을 뜻한다. 그리고 누구든지 이 레포지토리를 자신의 컴퓨터로 가져갈 수 있다는 뜻이기도 하다. 하지만 본인이 아닌 이상 그 내용을 git push할 수 없어 리모트 레포지토리가 다른사람에 의해 변경되지는 않는다.
	4. 이러한 상태에서 다른 사용자도 git push할 수 있도록 설정을 바꾸는 법!
		(1) 아래 초록색 버튼인 Invite a collaborator를 클릭한다.
		(2) 초대하고자 하는 다른 사용자를 검색한다.
		(3) 검색이 완료되면 초록색 버튼인 'Add 사용자이름 to 레포지토리이름' 버튼을 누른다. 
		(4) Manage access탭 화면을 다시 보면 내가 초대를 보낸 사용자아이디 옆에 Pending invite라는 글씨가 보인다.
		(5) 초대를 받은 사용자는 본인의 이메일로 날라온 초대장에서 View invitation을 클릭한다.
		(6) Accept invitation 버튼을 누른다.
		(7) 다른 사용자가 collaborator가 되고, 이 때부터 이 다른 사용자도 git push를 할 수 있다!

* Github 상단 Explore 버튼을 클릭하면 내가 관심을 가질만한 프로젝트를 Github가 추천해준다.

* Github에 올려져있는 다른 사용자의 프로젝트를 불러오려면?
	1. 다른 사용자의 프로젝트를 검색하거나 주소를 작성하여 들어간다.
	2. 상단 초록색버튼인 Code를 누르면 https://github.com/프로젝트이름.git 이라는 url주소가 보일텐데 이 주소를 복사해둔다.
	3. git bash로 돌아와 커맨드를 작성해야하는데 우선 나의 로컬 레포지토리와 겹쳐서 파일이 엉키는 사태를 방지하기위해 현재 git bash상 들어가있는 디렉토리를 확인 후 다른 곳으로 이동한다.
	4. 저장하고자 하는 다른 디렉토리로 이동했다면 git clone https://github.com/프로젝트이름.git 커맨드를 사용한다.(복사했던 주소를 붙여넣기 하면된다.)
		- git clone : Github 프로젝트의 레포지토리를 그대로 복제
